Index: prepare_data.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pickle\nimport glob\nfrom keras.utils import np_utils\nfrom sklearn import model_selection\nfrom music21 import instrument, note, chord, converter\nimport cfg\n\n\ndef get_notes():\n    \"\"\"OVA METODA PARSIRA SVE MIDI FAJLOVE U NIZ I SERIJALIZUJE IH U FAJL\"\"\"\n\n    notes = []\n    # podaci su odvojeni u dve klase: Note i Chord. Note objekat sadrzi podatke o tri parametra, pitch,  octave,\n    # and offset. Chord je container za 3 ili vise Notes objekata\n    for file in glob.glob(\"midi_songs/*.mid\"):\n        midi = converter.parse(file)\n\n        print(\"Parsing %s\" % file)\n\n        notes_to_parse = None\n\n        try:  # ako fajl ima instrumente, jer su neki corrupted\n            s2 = instrument.partitionByInstrument(midi)\n            notes_to_parse = s2.parts[0].recurse()\n        except:  # neki fajlovi nemaju instrumente samo note???\n            notes_to_parse = midi.flat.notes\n\n        for element in notes_to_parse:\n            if isinstance(element, note.Note):\n                notes.append(str(element.pitch))  #\n            elif isinstance(element, chord.Chord):\n                notes.append('.'.join(str(n) for n in element.normalOrder))  # akord pretvara u note odvojene tackom\n\n    pitchnames = sorted(set(item for item in notes))\n\n    with open('data/notes', 'wb') as filepath:\n        pickle.dump(notes, filepath)\n\n    with open('data/pitchnames', 'wb') as filepath:\n        pickle.dump(pitchnames, filepath)\n\n    return\n\n\ndef prepare_sequences():\n    \"\"\"METODA SERIJALIZUJE PAROVE ULAZ IZLAZ GDE JE ULAZ NIZ OD 100 NOTA, A IZLAZ ONE HOT CODED NIZ, ZA TRAIN I TEST DEO\"\"\"\n    sequence_length = cfg.sequence_length\n    with open('data/notes', 'rb') as filepath:\n        notes = pickle.load(filepath)\n    # broj sekvenci, ne valja da bude mali zbog exploding gradijent i greske su velike, lstm pamti 100 nota unazad,\n    # vise od 100 je pretesko za treniranje, treba mnogo vremena\n\n    # poredjani pojedinacni pitch\n    pitchnames = sorted(set(item for item in notes))\n\n    # dictionary koji prevodi pitch u int\n    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))\n\n    network_input = []\n    network_output = []\n\n    # stvara sekvence\n    # za predvidjanje jedne note ili akorda, koristi 100 prethodnih, povezuju se parovi 100 ulaza jedan izlaz\n    for i in range(0, len(notes) - sequence_length, 1):\n        sequence_in = notes[i:i + sequence_length]\n        sequence_out = notes[i + sequence_length]\n        network_input.append([note_to_int[char] for char in sequence_in])\n        network_output.append(note_to_int[sequence_out])\n\n    # da bi bio kompatibilan sa lstm sojevima\n    network_output = np_utils.to_categorical(network_output)  # pretvara niz u binarnu matricu 0 i 1, za categorical\n    # crossentropy je neophodno\n    input_train, input_test, output_train, output_test = model_selection.train_test_split(network_input, network_output,\n                                                                                          test_size=0.15,\n                                                                                          random_state=134)\n\n    with open('data/train/input', 'wb') as filepath:\n        pickle.dump(input_train, filepath)\n    with open('data/train/output', 'wb') as filepath:\n        pickle.dump(output_train, filepath)\n\n    with open('data/test/input', 'wb') as filepath:\n        pickle.dump(input_test, filepath)\n\n    with open('data/test/output', 'wb') as filepath:\n        pickle.dump(output_test, filepath)\n    return\n\n\nif __name__ == '__main__':\n    # get_notes()\n    prepare_sequences()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prepare_data.py b/prepare_data.py
--- a/prepare_data.py	(revision 825745e64fdde62a082326af6f99c79b2702325e)
+++ b/prepare_data.py	(date 1677747291564)
@@ -88,5 +88,5 @@
 
 
 if __name__ == '__main__':
-    # get_notes()
+    get_notes()
     prepare_sequences()
Index: cfg.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>weights_format = \"weights-v2/weights-improvement-{epoch:02d}-{loss:.4f}-bigger.hdf5\"\nsequence_length = 100\ndropout_seed = 43\n\nbest_weights = \"weights/weights-improvement-10-0.1891-bigger.hdf5\"\noutput_stream_file = \"output/o7utput.mid\"\ninitial_epoch = 0\nnumber_of_predictions = 200\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cfg.py b/cfg.py
--- a/cfg.py	(revision 825745e64fdde62a082326af6f99c79b2702325e)
+++ b/cfg.py	(date 1677747508653)
@@ -1,5 +1,5 @@
 weights_format = "weights-v2/weights-improvement-{epoch:02d}-{loss:.4f}-bigger.hdf5"
-sequence_length = 100
+sequence_length = 50
 dropout_seed = 43
 
 best_weights = "weights/weights-improvement-10-0.1891-bigger.hdf5"
Index: .idea/midi-composer-nn.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (midi-composer-nn)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/midi-composer-nn.iml b/.idea/midi-composer-nn.iml
--- a/.idea/midi-composer-nn.iml	(revision 825745e64fdde62a082326af6f99c79b2702325e)
+++ b/.idea/midi-composer-nn.iml	(date 1677747159601)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8 (midi-composer-nn)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (midi-composer-nn)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 825745e64fdde62a082326af6f99c79b2702325e)
+++ b/.idea/misc.xml	(date 1677747159605)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (midi-composer-nn)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
